Python3
class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        ans = []
        def dfs(l, r, res):
            nonlocal ans
            if l > n or r > n or l < r:
                return
            if l == n and r == n:
                ans.append(res)
                return
            if l < n:
                dfs(l+1, r, res + '(')
            if r < n:
                dfs(l, r+1, res + ')')
        dfs(0, 0, "")
        return ans
        
        
        
        
C++      
        class Solution {
public:
    void gp(vector<string>& ans, int n, int l, int r, string s){
        if (l > n || r > n || l < r) return ;
        else if (l == n && r == n){
            ans.push_back(s);
        }
        else{
            gp(ans, n, l+1, r, s+"(");
            gp(ans, n, l, r+1, s+")");
        }
        return ;
    }
    vector<string> generateParenthesis(int n) {
        vector<string> ans;
        gp(ans, n, 0, 0, "");
        return ans;
    }
};
